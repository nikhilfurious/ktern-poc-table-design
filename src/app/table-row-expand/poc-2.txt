<div  style="display: flex;">
    <button  id="btn1" style="margin-right: 20px;" pButton type="button" (click)="op.toggle($event)" icon="pi pi-table" ></button>
    <div class="col-md-4">
        <button  id="btn1" pButton type="button" (click)="mf.toggle($event)" icon="pi pi-filter" ></button>
        <span class="p-input-icon-left">
            <i class="pi pi-search"></i>
            <input pInputText type="text" (input)="dt.filterGlobal($event.target.value, 'contains')" placeholder="Global Search" />
        </span>
    </div>
    <!-- <button pButton type="button">New Project</button> -->

</div>

<div class="ui-g ui-fluid">

    <!-- Overlayy Panel  -->
        <p-overlayPanel #op [style]="{width: 'auto', height: 'auto'}" >
            
            <h6>Table Column</h6> 
            <div class="btn-group" *ngFor = "let i of types , let n = index">
           <button   
           class="mr-2 btn"     
           [ngClass]="{' btn-success': !i.isActive,
           ' btn-secondary':i.isActive }"
          
            (click)="onColumnOrder($event,i,'cl'+n)">
            {{i.label}}</button>
<!--           
             <input type="button" class="mr-2 btn"  [ngClass]="{' btn-success': !i.isActive,
             ' btn-secondary':i.isActive }" (click)="onColumnOrder($event,i,'cl'+n)" value="{{i.label}}"> -->
    
            </div>
         <br>

    
            <h6>Amount</h6>
            <div class="p-buttonset">
                <p-selectButton id="amount" [options]="account" [(ngModel)]="accont_value" (onOptionClick)="onAmountChange($event)"></p-selectButton>
            </div>
            <br>
    
            <h6>Date Format</h6>
            <div class="p-buttonset">
                <p-selectButton id="date" [options]="date_format_type" [(ngModel)]="date_format_value" (onOptionClick)="onDateChange($event)"></p-selectButton>
            </div>
         <br>
    
          <div>
              <input type="checkbox" > Sticky header 
          </div>
          <hr>
    
          <div class="flex-end">
            <button class=" mr-2 btn btn-info">Reset</button>
            <button class=" mr-2 btn btn-primary">Button</button>
          </div>
    
        </p-overlayPanel>
    <!-- Overlayy Panel End -->
    <p-overlayPanel #mf>
        <p-listbox  
        [options]="groupedFilterData" 
        (onChange) = "onFilter()"
        [group]="true"
        [(ngModel)]="selectedFilterData" 
         [metaKeySelection]="false"
          [checkbox]="true" 
          [filter]="true" [multiple]="true" [listStyle]="{'max-height':'250px'}" [style]="{'width':'15rem'}">
            <ng-template let-group pTemplate="group">
                <div class="flex align-items-center">
                    <span>{{group.label}}</span>
                </div>
            </ng-template>
        </p-listbox>
        
      <!-- <app-filter></app-filter> -->
    </p-overlayPanel> 
    
    <p-overlayPanel #status>
      <p-listbox #list [options]="listStatus" optionLabel="label" (click)="onListStatus($event.target.innerText)" ></p-listbox>
    </p-overlayPanel>

    <p-overlayPanel #resources [showCloseIcon]="true"  >
        <!-- <div id="resources" *ngFor = "let i of types , let n = index">
            <button id="resourcesBtn" class="mr-2 btn btn-primary"   [style.background-color]="i.isActive ? 'violet' : 'white'">{{i.label}}</button>
        </div> -->
        <div style="height:auto; width: 350px;">
            <div class="box" style="width: fit-content;" >
                <button 
                [ngClass] = "i.isActive ? 'btn btn-info' : 'btn btn-secondary'"
                 style="margin:2px; border-radius: 8px;"
                 (click)="onResourceSelect($event ,i)"
                 *ngFor="let i of reourcesList">
                 {{i.label}}
                </button>

                
              </div>
            <div >
        </div>
        

        <hr>
            </div>
            <div>
                <button class="btn btn-primary" (click)="onResourceApply(this)"> Apply</button>
            </div>
    </p-overlayPanel>
</div>
<div style="margin-bottom: 10px;margin-top:20px;margin-right: 10px;">
<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist" >
      <button  
      (click)="onStatusFilter($event,i)"
      [ngClass]="isActive && 'active' "
       class="nav-link"
       id="nav-home-tab" 
       data-bs-toggle="tab" 
       data-bs-target="#nav-home"
        type="button"
        role="tab" 
        aria-controls="nav-home"
         aria-selected="true"
        *ngFor = "let i of menus">
        {{i.label}}
           <!-- <span class="badge bg-secondary" (click)="onStatusFilter($event,i)">
               {{i.length}}
            <i class="fa fa-cross-circle-right fa-lg" ></i> -->

           <!-- </span> -->
        </button>


    </div>
  </nav>
  </div>
<p-table #dt [value]="menu ? projects : menu_filter_array " dataKey="id" styleClass="p-datatable-sm" responsiveLayout="scroll"  [reorderableColumns]="true" [filterDelay]="0" [globalFilterFields]="['id','projectName', 'projectManager']">

    <ng-template pTemplate="header">
        <tr>
            <th style="width: 3rem"></th>
            <th>
                <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
            </th>
            <th  pSortableColumn="id">#<p-sortIcon field="id"></p-sortIcon></th>
            <th class="cl0" pSortableColumn="projectName">Project Name<p-sortIcon field="projectName"></p-sortIcon></th>
            <th class="cl1" pSortableColumn="projectManager">Project Manager<p-sortIcon field="projectManager"></p-sortIcon></th>
            <th class="cl2" pSortableColumn="status">Status <p-sortIcon field="status"></p-sortIcon></th>
            <th class="cl3" pSortableColumn="lastUpdate"> Last Update <p-sortIcon field="lastUpdate"></p-sortIcon></th>
            <th class="cl4" pSortableColumn="resources">Resources<p-sortIcon field="resources"></p-sortIcon></th>
            <th class="cl5" pSortableColumn="projectTimeline" colspan="3">Project Timeline<p-sortIcon field="projectTimeline"></p-sortIcon></th>
            <th class="cl6" pSortableColumn="estimation.amount">Estimation<p-sortIcon field="estimation.amount"></p-sortIcon></th>        </tr>
    </ng-template>
    <ng-template id="myTable" pTemplate="body" let-project let-expanded="expanded">
        <tr>
            <td>
                <button type="button" pButton pRipple [pRowToggler]="project" class="p-button-text p-button-rounded p-button-plain" [icon]="expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'"></button>
            </td>
            <td>
                <p-tableCheckbox [value]="project"></p-tableCheckbox>
            </td>
            <td pEditableColumn>
                <p-cellEditor [style]="{'width':'50px'}">
                    <ng-template pTemplate="input" >
                        <input  pInputText type="text" [(ngModel)]="project.id"> 
                    </ng-template>
                    <ng-template pTemplate="output">
                        {{project.id}}
                    </ng-template>
                </p-cellEditor>
            </td>
            <td class="cl0">{{project.projectName}}</td>
            <td class="cl1">{{project.Manager}}</td>
            <!-- <td class="cl1">{{project.projectManager}}</td> -->
            <td class="cl2" (click)="status.toggle($event) ; onStatus(project)" >{{project.status}}
            </td>
           <td class="cl3" >{{project.lastUpdate |date:[date_format_value]}}
           <td class="cl4" style="text-align: center;">
               <div *ngIf = "project.resources_alloted.length > 0; else applyResources" style="text-align: center;">
                   {{project.resources_alloted.length}}
               </div>
               <ng-template #applyResources style="background-color: blue;">
                <i class="pi pi-plus"  (click)="resources.toggle($event); onStatus(project)" ></i>
              </ng-template>

              <td id="std" colspan="3" class="cl5">
            
               
                    <div class="tdinline"  (click)="csactive();showUndoBtn(project.id)">
                        {{project.startdate| date : "dd.MM.y" }}
                        <span *ngIf="project.startdate.length == 0">-</span>
                         
                    </div>
                    <div class="tdinline" *ngIf="showBtn===project.id"><p-calendar [showButtonBar]="true" [touchUI]="true" [inline]="true" (onClearClick)="cl();csactive();csonch(project.id);" (onSelect)="onsch($event,project.id);csactive();" [ngClass]="msstatus ? 'cstart' : 'cstart inactive'"></p-calendar></div>
                    <div class="tdinlinei">
                        <i class="pi pi-angle-right"></i>
                    </div>
                    <!-- date:[date_format_value] -->
                    <div class="tdinline" (click)="ceactive();showUndoBtn(project.id)">
                        {{project.enddate| date : "dd.MM.y" }}<span *ngIf="project.enddate.length == 0">-</span>
                       
                    </div>
                    <!-- [monthNavigator]="true" [yearNavigator]="true" yearRange="2000:2030" -->
                    <div class="tdinline" *ngIf="showBtn===project.id"><p-calendar [showButtonBar]="true" (onClearClick)="cl();ceactive();ceonch(project.id);" [touchUI]="true" [inline]="true" (onSelect)="onch($event,project.id);ceactive();" [ngClass]="mestatus ? 'cend' : 'cend inactive'"></p-calendar></div>
                
            </td>

            <td class="cl6">
           <div *ngIf="amount_boolean; else elseBlock">
              {{project.estimation.currency}} {{project.estimation.amount |number: '2.'}}
            </div>
              <ng-template #elseBlock>
                {{project.estimation.currency}} {{project.estimation.amount | thousandPipe : 2 }}
              </ng-template> 
              </td>
           <!-- <td class="cl6"> {{project.estimation.currency}} {{project.estimation.amount | thousandPipe : 2 }} </td> -->
        </tr>
    </ng-template>
    <ng-template pTemplate="rowexpansion" let-project>
     
        <tr>
            <td colspan="7">
                <div class="p-p-3">
                    <!-- <div class="container">
                        <ul class="timeline" *ngFor = "let i of project.traker">
                            <li>
                              <div class="timeline-badge"><i class="bi bi-calendar2-event"></i></div>
                              <div class="timeline-panel">
                                <div class="timeline-heading">
                                  <h4 class="timeline-title">Event</h4>
                                  <p><small class="text-muted"><i class="glyphicon glyphicon-time"></i> 11 hours ago via Twitter</small></p>
                                </div>
                                <div class="timeline-body">
                                  {{i.status}}
                                </div>
                              </div>
                            </li>
    
                        </ul>
                      </div> -->
                  
                        <p-timeline [value]="project.traker">
                            <ng-template pTemplate="content" let-event>
                                &#123;&#123;event.status&#125;&#125;
                            </ng-template>
                        </p-timeline>
                    </div>
                
            </td>
        </tr>
    
    </ng-template>
  </p-table>



  .....

  .pSelectButtonStyle {
    border-top-left-radius: .3em;
    border-top-right-radius: .3em;
    border-bottom-left-radius: .3em;
    border-bottom-right-radius: .3em;
    border-left: solid #cccccc .07em;
    border-right: solid #cccccc .07em;
}

.flex-end {
  display: flex;
  justify-content: flex-end;
}
.purple{
  background-color: blue;
}
.white{
  background-color: grey;
}

th{
  width: "3rem"
}
.p-checkbox ,.p-checkbox-box {
  border: 2px solid #ced4da;
  background: #fff;
  width: 14px;
  height: 14px;
  color: #a3b0bd;
  border-radius: 3px;
  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;
}


.p-timeline-event-content, .p-timeline-event-opposite {
  /* flex: 1; */
  padding: 0 1rem;
  display: flex !important;
  flex: 0;
  position: absolute;
}

.p-timeline.p-timeline-vertical .p-timeline-event-opposite, .p-timeline.p-timeline-vertical .p-timeline-event-content {
  padding: 0 1rem;
  flex: 0;
  position: absolute;
  display: flex! important
}

.p-timeline-vertical .p-timeline-event-opposite, .p-timeline.p-timeline-vertical .p-timeline-event-content {
  padding-top: 1px;
  padding-right: 1rem;
  padding-bottom: 0px;
  padding-left: 1rem;
  position: absolute;
}

.tabCol{
  display: none;
}

.p-datatable.p-datatable-sm .p-datatable-thead > tr > th {
  padding: 0.5rem 0.5rem;
  background: #add8e6;
  color: #000;
  /* --bs-link-hover-color: #a52a2a; */
}
#resources{
  
width: 381px;
height: 170px;

/* Gray/0 */

background: grey;
border-radius: 8px;

/* Inside auto layout */

flex: none;
order: 1;
flex-grow: 0;
}

#resourcesBtn{
  /* push button */


/* Auto layout */

display: flex;
flex-direction: row;
justify-content: center;
align-items: center;
padding: 2px 8px;
gap: 8px;

position: absolute;
width: 71px;
height: 22px;
left: 127px;
top: 44px;

/* White */

/* background: #FFFFFF; */
/* sd-button/default */

box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.1), 0px 0px 0px 1px rgba(70, 79, 96, 0.16);
border-radius: 4px;
}
.box {
  display: flex;
  /* background-color: yellow; */
  flex-wrap: wrap;
}
.p-timeline-event-content, .p-timeline-event-opposite {
  /* flex: 4; */
  padding: 0 1rem;
  margin-left: 100px;
  display: flex !important
}


/* mcss */
.tdinline {
  display: inline-flex;
  align-items: center;
  align-content: center;
  background-color: aliceblue;
  color: blue;
  border-radius: 50px;
  text-align: center;
}
.tdinlinei {
  display: inline-flex;
  align-items: center;
  align-content: center;
  color: blue;
  border-radius: 5px;
  text-align: center;
}
#std{
  /* text-align: center; */
  color: #000;
}
#std div:nth-child(odd){
  text-align: center;
  align-content: center;
  align-items: center;
  justify-content: center;
  min-width: 30%;
}

.cend.inactive {
  display: none;
}

.cend {
  /* display: none; */
  color: coral;
}

.cstart.inactive {
  display: none;
}

.cstart {
  /* display: none; */
  color: coral;
}

.mbody{
  background: #f5f6fa;
  overflow: auto;
  text-align: center;
}

.mbody.active .mwrapper .msidebar{
  left: -225px;
}

.mbody.active .mwrapper .msection{
  margin-left: 0;
  width: 100%;
}
::ng-deep .p-calendar .p-datepicker-touch-ui, .p-datepicker-touch-ui {
padding: 0.5rem;
min-width: 20vw !important;
color: #495057;
max-width: 30vw !important;
border: 1px solid #ced4da;
border-radius: 3px;
}

/* mcss */

.....


import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ProductService } from '../product.service';
import _, { map } from 'underscore';
import { DatePipe } from '@angular/common'

@Component({
  selector: 'app-table-row-expand',
  templateUrl: './table-row-expand.component.html',
  styleUrls: ['./table-row-expand.component.css'],
  providers:[DatePipe]
})
export class TableRowExpandComponent implements OnInit {

  loading: boolean = true;
  groupedFilterData: any = [];
  curatedFilters: any = []
  selectedFilterData : any = [];
  tableFilters : any = []
  columnFilteredData: any = [];
  
  filteredData : any = []; 
  filterObject = {
    label : String,
    value : String,
    items : []
}
groupFilter = [{}]
//

amount_boolean = true;

 listStatus = [    
  {label: 'OnHold', icon: 'pi pi-fw pi-calendar',isActive:false,length:3},
  {label: 'Risk', icon: 'pi pi-fw pi-calendar',isActive:true,length:3},
  {label: 'Ontrack', icon: 'pi pi-fw pi-pencil',isActive:false,length:2},
  {label: 'Potential Risk', icon: 'pi pi-fw pi-file',isActive:false,length:2}
]

  //menus -> Used for Tab Menu
  menus = [
      {label: 'All', icon: 'pi pi-fw pi-home' ,isActive:true,length:7},
      {label: 'OnHold', icon: 'pi pi-fw pi-calendar',isActive:false,length:3},
      {label: 'Risk', icon: 'pi pi-fw pi-calendar',isActive:true,length:3},
      {label: 'Ontrack', icon: 'pi pi-fw pi-pencil',isActive:false,length:2},
      {label: 'Potential Risk', icon: 'pi pi-fw pi-file',isActive:false,length:2},
    
  ];

  //types -> Checkbox
  types = [
    {label:'Project Name',value:'projectName',isActive:true},
    {label:'PM',value:'projectManager',isActive:true},
    {label:'Status',value:'status',isActive:true},
    {label:'Last Update',value:'lastUpdate',isActive:true},
    {label:'Resources',value:'resources',isActive:true},
    {label:'Project Timeline',value:'projectTimeLine',isActive:true},
    {label:'Estimation',value:'estimation',isActive:true},
  ];

  reourcesList = [
    {label:'UI/UX designer' , value:'UI/UX designer', isActive:false},
    {label:'Front End Developer' , value: 'Front End Developer', isActive:false},
    {label:'PM' , value: 'Front End Developer', isActive:false},
    {label:'Back End Developer' , value: 'Back End Developer', isActive:false},
    {label:'Solution Architect' , value: 'Solution Architect', isActive:false}
  ]

//projects -> List of project details
projects = [];


//newArr -> to store the fitlered list of columns which are active
  newArr: { label: string; value: string; isActive: boolean; }[];
  account =[
    {label:"10.5k",value:"decimal"},
    {label:"10,5000",value:"thousand"}
    ]
    account_value = ''
  date_format_type =[
      {label:"DD/MM/YYYY",value:"dd/LL/yyyy ,hh:mm "},
      {label:"MM/DD/YYYY",value:"LL/dd/yyyy"},
      {label:"DD/MM/YYYY",value:"DD/MMM/YYYY"}
    ]
    date_format_value ='dd LLL yyyy,HH:MM aaaa'
    date_boolean = false;
onFilter($event: string[]): void {
if(this.selectedFilterData.length===0){
  this.menu = true
  console.log(this.menu,this.projects)
} else {
this.menu = false;
var data = []
this.projects.forEach(element =>{
    this.tableFilters.forEach(el =>{
        //console.log(el)
        if(this.selectedFilterData.indexOf(element[el]) > -1){
            console.log(element)
            data.push(element)
        }
    })
})

// this.menu_filter_array = [...new Set(this.columnFilteredData)]
this.columnFilteredData = [...new Set(data)]
this.menu_filter_array =  [...this.columnFilteredData]
console.log('CFD',this.columnFilteredData)
console.log(this.menu_filter_array)
}}
// products: Product[];
// groupFilter = [{}]
calendarDates = [];
// declarations for mcode *Mugesh
msstatus: boolean = false;
  mestatus: boolean = false;
  showBtn=-1;
constructor(private productService: ProductService , public datepipe: DatePipe){

  this.calendarDates = [
    {"id":1,"from":"Tue Sep 12 2022 10:55:55 GMT+0530 (India Standard Time)","to":"Tue Sep 30 2022 10:55:55 GMT+0530 (India Standard Time)"},
    // {id:2,"from":"24.01.2022","to":"20.08.2022"},
    // {id:3,"from":"12.12.2022","to":"20.08.2022"}
  ]
  this.projects = [
    {
    "id": 1,
    "projectName":"Kaar Tech",
    "Manager":"Jeevan",
    "status":"Risk",
    "lastUpdate": "Tue Sep 27 2022 10:55:55 GMT+0530 (India Standard Time)",
    "resources_alloted":[],
    "startdate": "", "enddate": "15 feb 2002",
    "estimation" : {
      "amount":10600,
      "currency":"US$"
    },
    "traker":[{
      "id":1,
      "status":"Estimated on 12.09.2022"
    },{
      "id":1,
      "status":"Changed on 12.09.2022"
    },{
      "id":1,
      "status": "Updated on 12.09.2022"
    }]
  },
  {
    "id":2,
    "type":"string",
    "projectName":"Daimler",
    "Manager":"Jeevan",
    "status":"Ontrack",
    "lastUpdate": "Tue Sep 27 2022 10:55:55 GMT+0530 (India Standard Time)",
    "resources_alloted":["UI designer","Front End Developer","Back End Developer"],
    "startdate": "",
     "enddate": "15 feb 2002",
    "estimation" : {
      "amount":10700,
      "currency":"US$"
    },
  
   "traker":[{
    "id":2,
    "status":"Estimated on 11.09.2022"
  },{
    "id":2,
    "status":"Changed on 02.09.2022"
  },{
    "id":2,
    "status": "Updated on 22.09.2022"
  }]
  },
  {
    "id":3,
    "type":"string",
    "projectName":"Dell",
    "Manager":"Mohan Das",
    "status":"OnHold",
    "lastUpdate": "Tue Sep 27 2022 10:55:55 GMT+0530 (India Standard Time)",
    "resources_alloted":["UI designer","Front End Developer","Back End Developer"],
    "startdate": "15 jan 2001", "enddate": "15 feb 2002",
    "estimation" : {
      "amount":10500,
      "currency":"US$"
    },
   "traker":[{
    "id":3,
    "status":"Estimated on 10.08.2022"
  },{
    "id":3,
    "status":"Changed on 12.09.2022"
  },{
    "id":3,
    "status": "Updated on 12.09.2022"
  }]
  },
  {
    "id":4,
    "projectName":"Almas Tofech",
    "Manager":"Ravi",
    "status":"Potential Risk",
    "lastUpdate": "Tue Sep 27 2022 10:55:55 GMT+0530 (India Standard Time)",
    "resources_alloted":["UI designer","Front End Developer","Back End Developer"],
    "startdate": "14 jan 2001", "enddate": "15 feb 2002",
    "estimation" : {
      "amount":10800,
      "currency":"US$"
    },
  
   "traker":[{
    "id":4,
    "status":"Estimated on 10.08.2022"
  },{
    "id":4,
    "status":"Changed on 12.09.2022"
  },{
    "id":4,
    "status": "Updated on 12.09.2022"
  }]
  
  },
  {
    "id":5,
    "projectName":"Al Bid Info Tech",
    "Manager":"Gopal Das",
    "status":"Risk",
    "lastUpdate": "Tue Sep 27 2022 10:55:55 GMT+0530 (India Standard Time)",
    "resources_alloted":["UI designer","Front End Developer","Back End Developer"],
    "startdate": "", "enddate": "15 feb 2002",
    "estimation" : {
      "amount":10900,
      "currency":"US$"
    },
  
   "estimation_tracker":"Roger updated estimation from US$ 15k to US$ 10K on May 18 2021 @ 4.14pm",
   "status_tracker":"Roger changed status from On Hold 15k to On Track on May 18 2021 @ 4.14pm",
   "created_tracker":"Roger created project on 11 May 2021",
   "traker":[{
    "id":5,
    "status":"Estimated on 12.09.2022"
  },{
    "id":5,
    "status":"Changed on 12.09.2022"
  },{
    "id":5,
    "status": "Updated on 12.09.2022"
  }]
  },
  {
    "id": 6,
    "projectName": "Al Rias",
    "Manager":"Jeevan",
    "status":"Risk",
    "lastUpdate": "Tue Mar 28 2022 10:55:55 GMT+0530 (India Standard Time)",
    "resources_alloted":["UI designer","Front End Developer","Back End Developer"],
    "startdate": "14 jan 2001", "enddate": "",
    "estimation" : {
      "amount":10200,
      "currency":"US$"
    },
   "traker":[{
    "id":6,
    "status":"Estimated on 12.09.2022"
  },{
    "id":6,
    "status":"Changed on 12.09.2022"
  },{
    "id":6,
    "status": "Updated on 12.09.2022"
  }]
  }];
  console.log(this.projects)
  this.tableFilters = ['projectName','Manager']
  this.tableFilters.forEach(key =>{
  this.curatedFilters[key] = _.uniq(_.pluck(this.projects, key));
})

//logic to arrange the array needed for ListBox [Filter]
 for(let i=0;i<this.tableFilters.length;i++){
  var filterObject = {}
  filterObject['label'] = this.tableFilters[i]
  filterObject['values'] = this.tableFilters[i]
  filterObject['items'] = []
   var filterArray = this.curatedFilters[this.tableFilters[i]]
  for(let j =0;j < filterArray.length;j++){
      var object = {
          label: filterArray[j],
          value:  filterArray[j],
      }
     filterObject['items'].push(object)   
  }
this.groupedFilterData.push( filterObject)
}

console.log("Group Filter",this.groupedFilterData)

 
//  console.log(this.date_format_value)
}
onDateChange(event){
  this.date_boolean = true;
this.date_format_value = event.value
}
onAmountChange(event){
  debugger
  if(event.option.value === "decimal"){
    this.amount_boolean = false
  } else if(event.option.value === "thousand"){
    this.amount_boolean = true
  }
}
resourceID = ''
onResourceSelect(event ,i){
  if(i.isActive === false){
    i.isActive = true
  } else {
    i.isActive = false
  }
}
onResourceApply(this){

  var addResource = this.reourcesList.filter(function(record){
return record.isActive === true;
  })
  this.projects.forEach(ele =>{
    if(ele["id"] === this.statusId){

      ele['resources_alloted'] = [...addResource]
     }
  })
  // console.log(this.resourceID)
  console.log(this.projects)

}

//Function to filter the list of columns which are active and to be displayed
onColumnOrder(event,i,cl){

  var index = document.getElementsByClassName(cl)
  if(i.isActive === false){
    i.isActive = true
    for(let i=0;i<index.length;i++){
      index[i].classList.remove("tabCol")
    } 
  } else {
    i.isActive = false
    for(let i=0;i<index.length;i++){
      index[i].classList.add("tabCol")
    }}
  this.newArr = this.types.filter(function(record) {  
    return record.isActive === true ;
});
 console.log(this.newArr)
}
menu_filter_array = []; // filtered project details based on menu selection
menu_arry = []
menu :boolean = true;
statusId = 0
onStatusFilter(event,i){
var text =  i.label
console.log(text)
if(this.columnFilteredData.length > 0 && this.selectedFilterData.length > 0){
this.projects = [...this.columnFilteredData]
}
console.log('Status Data Array ',this.projects);
if(text !='All'){
this.menu = false

this.menu_filter_array = this.projects.filter(function(record){
  return record.status === text;
})
} 
else{
  this.menu = true;
}

console.log('Status Filtered Data',this.menu_filter_array)
}
statusUpdate = ''
onStatus(info){
  this.statusId = info.id
  console.log('This Status',this.statusId)
}

onListStatus(event){
  console.log(event)
  console.log(this.statusId)
  this.projects.forEach(ele =>{
    if(ele["id"] === this.statusId){
      ele["status"] = event
    }
  })
  console.log(this.projects)

}

  //  mcode
  csactive() {
    console.log("hi");
    this.msstatus = !this.msstatus;
  }
  ceactive() {
    console.log("hi");
    this.mestatus = !this.mestatus;
  }

  showUndoBtn(index){
    console.log(index);
    this.showBtn=index;
  }


  onch(valued, id) {
    console.log(valued, id);
    this.myFunction(valued, id)
  }
  onsch(valued, id) {
    console.log(valued, id);
    this.mysFunction(valued, id)
  }
  mysFunction(valued, id) {
    // this.cdate=new Date();
    let latest_date = this.datepipe.transform(valued, 'yyyy-MM-dd');
    console.log(latest_date);
    // const index: number = this.tmdata.indexOf(id);
    const newArr = this.projects.map(obj => {
      if (obj.id === id) {
        return { ...obj, startdate: latest_date };
      }

      return obj;
    });
    // console.log(index,id)
    console.log(newArr)
    this.projects = newArr
  }
  myFunction(valued, id) {
    // this.cdate=new Date();
    let latest_date = this.datepipe.transform(valued, 'yyyy-MM-dd');
    console.log(latest_date);
    // const index: number = this.tmdata.indexOf(id);
    const newArr = this.projects.map(obj => {
      if (obj.id === id) {
        return { ...obj, enddate: latest_date };
      }

      return obj;
    });
    // console.log(index,id)
    console.log(newArr)
    this.projects = newArr
  }

  //new
ceonch(id) {
    console.log(id);
    this.cemyFunction(id)
  }
  cemyFunction(id) {
    // this.cdate=new Date();
    // let latest_date = this.datepipe.transform(valued, 'yyyy-MM-dd');
    // console.log(latest_date);
    // const index: number = this.tmdata.indexOf(id);
    const newArr = this.projects.map(obj => {
      if (obj.id === id) {
        return { ...obj, enddate: "" };
      }
      return obj;
    });
    // console.log(index,id)
    console.log(newArr)
    this.projects = newArr
  }
  csonch(id) {
    console.log(id);
    this.csmyFunction(id)
  }
  csmyFunction(id) {
    // this.cdate=new Date();
    // let latest_date = this.datepipe.transform(valued, 'yyyy-MM-dd');
    // console.log(latest_date);
    // const index: number = this.tmdata.indexOf(id);
    const newArr = this.projects.map(obj => {
      if (obj.id === id) {
        return { ...obj, startdate: "" };
      }
      return obj;
    });
    // console.log(index,id)
    console.log(newArr)
    this.projects = newArr
  }
  //new

  // mcode
  ngOnInit() { 
    this.newArr = this.types.filter(function(record) {  
      return record.isActive === true ;
  });
   }
}





  
